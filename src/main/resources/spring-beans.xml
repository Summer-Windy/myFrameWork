<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">


	<!-- 自动扫描 -->

	<!-- 分散配置 -->
	<context:property-placeholder location="classpath:hibernate.properties" />
	
	<!-- 注入扫描 -->
	<!-- <context:component-scan base-package="com.xbb.net" /> -->
	<!-- 导入注解相关的包 -->
	<context:annotation-config/> 

	<!-- 打印demo -->	
	<bean id="usbDiskWriter" class="com.xbb.net.service.UsbDiskWriter" />
	<bean id="floppyWriter" class="com.xbb.net.service.FloppyWriter" />
	<bean id="businessBean" lazy-init="true"  class="com.xbb.net.service.BusinessBean"> 
		<property name="deviceWriter">
			<ref bean="usbDiskWriter"/>
		</property>
	</bean>
	
	<!-- lazy-init demo -->	
	<bean id="person" class="com.xbb.net.service.Person">    
        <property name="id" value="23"></property>    
        <property name="name" value="肖兵兵"></property>    
    </bean> 
	<bean id="newPerson" lazy-init="true" class="com.xbb.net.service.NewPerson">
		 <!-- <property name="person" ref="person"></property>    -->
	</bean>
	
	


	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverclass}" />
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="maxPoolSize" value="${c3p0.pool.size.max}" />
		<property name="minPoolSize" value="${c3p0.pool.size.min}" />
		<property name="initialPoolSize" value="${c3p0.pool.size.ini}" />
		<property name="acquireIncrement" value="${c3p0.pool.size.increment}" />
	</bean>

	<!-- 本地会话工程bean，是spring整合hibernate的核心 入口-->
	<!-- <bean id="sessionFactory"	class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">-->
<!-- 	<bean id="sessionFactory"	class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">--> 
	<bean id="sessionFactory"	class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
		<!-- 映射文件的目录 -->
		<!-- <property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/pitayahome/springmvc/domain</value>
			</list>
		</property> -->
		
		<property name="packagesToScan">
			<list>
				<value>com.xbb.net.domain</value>
				<value>com.xbb.net.domain.*</value>
			</list>
		</property>
	</bean>
	
	<!-- hibernate事务管理器，在service层上实现事务管理，实现平台无关 -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.xbb.net.service.*.*(..))" id="interceptorPointCuts"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts"/>
	</aop:config>
	

	
	<!-- aop 配置（XML）方式 -->
	<!-- <aop:config>
        <aop:aspect id="TestAspect" ref="aspectBean">
            配置com.spring.service包下所有类或接口的所有方法
            <aop:pointcut id="businessService" expression="execution(* com.spring.service.*.*(..))" />
            <aop:before pointcut-ref="businessService" method="doBefore"/>
            <aop:after pointcut-ref="businessService" method="doAfter"/>
            <aop:around pointcut-ref="businessService" method="doAround"/>
            <aop:after-throwing pointcut-ref="businessService" method="doThrowing" throwing="ex"/>
        </aop:aspect>
    </aop:config>
    <bean id="aspectBean" class="com.spring.aop.TestAspect" />
    <bean id="aService" class="com.spring.service.AServiceImpl"></bean>
    <bean id="bService" class="com.spring.service.BServiceImpl"></bean> -->
	
	<!-- aop 注解方式 -->
	<!-- 下面2个是等效的,bean的优先级会比<aop > 高
          我希望强制cglib,但是发现<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> 后还是jdkproxy.
          原因是没有改<bean>的,由于bean的优先级高,导致<aop>配置无效 -->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
    <!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" /> -->  
    <!-- <bean id="aspectBean" class="com.spring.aop.TestAnnotationAspect" /> -->
    <bean id="aService" class="com.spring.service.AServiceImpl"></bean>  
    <bean id="bService" class="com.spring.service.BServiceImpl"></bean>
</beans>
